---
# tasks file for roles/service-principal
- include_tasks: secrets.yml

# - fail:

- set_fact:
    app_display_name: "http://aro-{{ sp_aro_cluster_name }}"

# azure_rm_adapplication creates a new app every time its run, this
# block checks for an existing and uses that making it more idempotent.
- block:
    - name: check for existing ad app
      azure.azcollection.azure_rm_adapplication_info:
        tenant: "{{ sp_tenant_id }}"
      register: _ad_applications
      no_log: true

    - set_fact:
        _ad_application_existing: "{{ (_ad_applications | json_query(jmesquery))[0] }}"
      vars:
        jmesquery: "applications[?app_display_name == `{{ app_display_name }}`]"
      when: _ad_applications | json_query(jmesquery) != []

    # Create AD application
    - name: Create ad application
      azure.azcollection.azure_rm_adapplication:
        tenant: "{{ sp_tenant_id }}"
        display_name: "{{ app_display_name }}"
      register: _ad_application_created
      when: _ad_application_existing is not defined

    - set_fact:
        _ad_application: "{{ _ad_application_existing | default(_ad_application_created) }}"
    - set_fact:
        _azr_service_principal_application_id: "{{ _ad_application.app_id }}"
        _app_oid: "{{ _ad_application.object_id }}"

- name: create ad sp
  azure.azcollection.azure_rm_adserviceprincipal:
    app_id: "{{ _azr_service_principal_application_id }}"
    tenant: "{{ sp_tenant_id }}"
    state: present
  register: _ad_sp

- name: wait a minute for AD sync new SP
  pause:
    minutes: 1
  when: _ad_sp.changed

- name: fetch service principal info
  azure.azcollection.azure_rm_adserviceprincipal_info:
    app_id: "{{ _azr_service_principal_application_id }}"
    tenant: "{{ sp_tenant_id }}"
  register: _ad_sp_info

- set_fact:
    _sp_oid: "{{ _ad_sp_info.service_principals[0].object_id }}"

- name: create ad password
  azure.azcollection.azure_rm_adpassword:
    app_id: "{{ _azr_service_principal_application_id }}"
    value: "{{ sp_aro_sp_password }}"
    tenant: "{{ sp_tenant_id }}"
  when: _ad_sp.changed or update_sp_password

# Get object id for role definition of ARO Subscription
- name: Obtain ARO Resource Group Role Definition Scope
  azure.azcollection.azure_rm_roledefinition_info:
    scope: "/subscriptions/{{ sp_subscription_id }}"
  register: sub_roledef_scope_output
  no_log: true

- name: Obtain Object ID of Contributor Role Definition
  set_fact:
    fact: "{{ sub_roledef_scope_output | json_query(jmesquery) }}"
  register: oid_sub_scope_query
  vars:
    jmesquery: "roledefinitions[?role_name == 'Contributor'].[id]"
  no_log: false

- name: Setting Object ID scope variable for the ARO Resource Group
  set_fact:
    sub_oid: "{{ oid_sub_scope_query.ansible_facts.fact[0][0] }}"

- name: Give ARO Subscription Contributor Role to the Service Principal
  azure.azcollection.azure_rm_roleassignment:
    scope: "/subscriptions/{{ sp_subscription_id }}"
    assignee_object_id: "{{ _sp_oid }}"
    role_definition_id: "{{ sub_oid }}"
    tenant: "{{ sp_tenant_id }}"
    subscription_id: "{{ sp_subscription_id }}"
  retries: 10
  delay: 60

## get ARO RP service principal
- name: get ad sp for ARO info
  azure_rm_adserviceprincipal_info:
    display_name: "Azure Red Hat OpenShift RP"
    tenant: "{{ sp_tenant_id }}"
  register: _aro_rp_info

- set_fact:
    _azr_aro_provider_id: "{{ _aro_rp_info.service_principals[0].object_id }}"

# Get object id for role definition of ARO resource group
- name: Obtain ARO Resource Group Role Definition Scope
  azure.azcollection.azure_rm_roledefinition_info:
    scope: "/subscriptions/{{ sp_subscription_id }}/resourceGroups/{{ sp_aro_rg }}"
  register: _rg_roledef_scope_output
  no_log: true

- name: Obtain Object ID of Contributor Role Definition
  set_fact:
    fact: "{{ _rg_roledef_scope_output | json_query(jmesquery) }}"
  register: _contributor_role_defs
  vars:
    jmesquery: "roledefinitions[?role_name == 'Network Contributor'].[id]" # Contributor
  no_log: false

- name: Setting Object ID scope variable for the ARO Resource Group
  set_fact:
    _contributor_oid: "{{ _contributor_role_defs.ansible_facts.fact[0][0] }}"

- name: Granting the ARO Resource Provider Contributor access to the subscription # ARO virtual network
  azure.azcollection.azure_rm_roleassignment:
    scope: "/subscriptions/{{ sp_subscription_id }}/resourceGroups/{{ sp_aro_rg }}/providers/Microsoft.Network/virtualNetworks/{{ sp_aro_vnet_name }}"
    assignee_object_id: "{{ _azr_aro_provider_id }}"
    role_definition_id: "{{ _contributor_oid }}"

- include_tasks: output.yml
